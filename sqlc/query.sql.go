// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package sqlc

import (
	"context"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO "messages" (from_id, from_authid, from_name, message) VALUES ($1, $2, $3, $4) RETURNING id
`

type CreateMessageParams struct {
	FromID     int64  `db:"from_id" json:"from_id"`
	FromAuthid string `db:"from_authid" json:"from_authid"`
	FromName   string `db:"from_name" json:"from_name"`
	Message    string `db:"message" json:"message"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createMessage,
		arg.FromID,
		arg.FromAuthid,
		arg.FromName,
		arg.Message,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO "users" (name, Authid, email) VALUES ($1, $2, $3) RETURNING id
`

type CreateUserParams struct {
	Name   string `db:"name" json:"name"`
	Authid string `db:"authid" json:"authid"`
	Email  string `db:"email" json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Name, arg.Authid, arg.Email)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getMessages = `-- name: GetMessages :many
SELECT id, from_id, from_authid, from_name, message, created_at FROM "messages"
`

func (q *Queries) GetMessages(ctx context.Context) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.FromID,
			&i.FromAuthid,
			&i.FromName,
			&i.Message,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByAuthID = `-- name: GetUserByAuthID :one
SELECT id, name, authid, email FROM "users"
WHERE Authid = $1
`

func (q *Queries) GetUserByAuthID(ctx context.Context, authid string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByAuthID, authid)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Authid,
		&i.Email,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, authid, email FROM "users"
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Authid,
		&i.Email,
	)
	return i, err
}
